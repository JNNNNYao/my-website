{"version":3,"file":"static/js/670.6dad292f.chunk.js","mappings":"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","sources":["pages/Spotify/SpotifyAPI.js","pages/Spotify/Spotify.js","pages/Misc.js"],"sourcesContent":["// acknowledgement: this code is adapted from Steve Hayes's Medium blog\n// https://medium.com/@stvehayes/working-with-spotifys-api-to-display-currently-playing-with-react-99544f8797d8\n\nimport queryString from \"query-string\";\nimport {Buffer} from 'buffer';\n\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\n\nconst client_id = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.REACT_APP_SPOTIFY_REFRESH_TOKEN;\n\nconst getAccessToken = async () => {\n    const basic = Buffer(`${client_id}:${client_secret}`).toString(\"base64\");\n\n    const response = await fetch(TOKEN_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Basic ${basic}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: queryString.stringify({\n            grant_type: \"refresh_token\",\n            refresh_token,\n        }),\n    });\n\n    return response.json();\n};\n\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n    const { access_token } = await getAccessToken(\n        client_id,\n        client_secret,\n        refresh_token\n    );\n\n    return fetch(NOW_PLAYING_ENDPOINT, {\n        headers: {\n            Authorization: `Bearer ${access_token}`,\n        },\n    });\n};\n\nexport default async function getNowPlayingItem(\n    client_id,\n    client_secret,\n    refresh_token\n) {\n    const response = await getNowPlaying(client_id, client_secret, refresh_token);\n    if (response.status === 204 || response.status > 400) {\n        return false;\n    }\n\n    const song = await response.json();\n    const albumImageUrl = song.item.album.images[0].url;\n    const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\n    const isPlaying = song.is_playing;\n    const songUrl = song.item.external_urls.spotify;\n    const title = song.item.name;\n\n    return {\n        albumImageUrl,\n        artist,\n        isPlaying,\n        songUrl,\n        title,\n    };\n}","// acknowledgement: this code is adapted from Steve Hayes's Medium blog\n// https://medium.com/@stvehayes/working-with-spotifys-api-to-display-currently-playing-with-react-99544f8797d8\n\nimport { useEffect, useState } from \"react\";\nimport getNowPlayingItem from \"./SpotifyAPI\";\nimport '../../css/Spotify.scss';\n\nexport default function SpotifyNowPlaying(props) {\n    const [loading, setLoading] = useState(true);\n    const [result, setResult] = useState({});\n    useEffect(() => {\n        if(loading) {\n            Promise.all([\n                getNowPlayingItem(\n                    props.client_id,\n                    props.client_secret,\n                    props.refresh_token\n                ),\n            ]).then((results) => {\n                setResult(results['0']);\n                setLoading(false);\n            });\n        }\n        else{\n            const interval = setInterval(() => {\n                Promise.all([\n                    getNowPlayingItem(\n                        props.client_id,\n                        props.client_secret,\n                        props.refresh_token\n                    ),\n                ]).then((results) => {\n                    setResult(results['0']);\n                    setLoading(false);\n                });\n            }, 10000);\n            return () => clearInterval(interval);\n        }\n    });\n    return (\n        <div className=\"spotify\">\n            {loading && <p>Loading...</p>}\n            {(!loading && !result.isPlaying) &&\n                <div>\n                    <span>I am not listening to Spotify right now.</span>\n                </div>\n            }\n            {!loading && result.isPlaying &&\n                <div className=\"song_wrapper\">\n                    <img src={result.albumImageUrl} alt={`${result.title} album art`}/>\n                    <div className=\"text_wrapper\">\n                        <a href={result.songUrl} target=\"\">{result.title}</a>\n                        <p>{result.artist}</p>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n};","import React from 'react';\nimport Navigation from './blocks/Navigation';\nimport Footer from './blocks/Footer'\nimport '../css/Misc.scss'\nimport SpotifyNowPlaying from './Spotify/Spotify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpotify } from '@fortawesome/free-brands-svg-icons';\n\nfunction Misc() {\n  const likes = ['Basketball (Lakers fan!) üèÄ', 'Baseball ‚öæ', 'Soccer ‚öΩ', 'Ski ‚õ∑', 'Dogs üêï', 'Killer Whale üêã', 'Coffee ‚òï', 'Coca-Cola ü•§'];\n  return (\n    <div class=\"body\">\n      <Navigation></Navigation>\n      <div id=\"misc\">\n        <div className=\"wrapper\">\n          <section className=\"intro\">\n            <header>\n              <h2>fun facts</h2>\n            </header>\n          </section>\n          <section className=\"resume_top\">\n            <header>\n              <h2>I like...</h2>\n            </header>\n            <ul>\n              {likes.map((value, index) => { return <li>{value}</li> })}\n            </ul>\n          </section>\n          <section className=\"resume\">\n            <header>\n              <h2><FontAwesomeIcon icon={faSpotify} size='xl' className='spotify_icon'/> I am playing...</h2>\n            </header>\n            <SpotifyNowPlaying/>\n          </section>\n        </div>\n      </div>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default Misc;\n"],"names":["getAccessToken","basic","Buffer","process","toString","fetch","method","headers","Authorization","body","queryString","grant_type","refresh_token","response","json","getNowPlaying","client_id","client_secret","access_token","getNowPlayingItem","status","song","albumImageUrl","item","album","images","url","artist","artists","map","_artist","name","join","isPlaying","is_playing","songUrl","external_urls","spotify","title","SpotifyNowPlaying","props","useState","loading","setLoading","result","setResult","useEffect","interval","setInterval","Promise","all","then","results","clearInterval","className","src","alt","href","target","class","Navigation","id","value","index","icon","faSpotify","size","Footer"],"sourceRoot":""}